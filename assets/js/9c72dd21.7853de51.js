"use strict";(self.webpackChunkneutrino=self.webpackChunkneutrino||[]).push([[3227],{2338:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>d,contentTitle:()=>l,default:()=>h,frontMatter:()=>s,metadata:()=>r,toc:()=>c});const r=JSON.parse('{"id":"design/cli","title":"Command Line Interface","description":"Neutrino envisions Command-Line(CLI) as the user entry with interfaces similar to strace, bpftrace, valgrind, etc.","source":"@site/docs/design/cli.md","sourceDirName":"design","slug":"/design/cli","permalink":"/docs/design/cli","draft":false,"unlisted":false,"editUrl":"https://github.com/neutrino-gpu/neutrino/docs/docs/design/cli.md","tags":[],"version":"current","sidebarPosition":2,"frontMatter":{"sidebar_position":2},"sidebar":"tutorialSidebar","previous":{"title":"System Overview","permalink":"/docs/design/overview"},"next":{"title":"Hook Driver","permalink":"/docs/design/hook-driver"}}');var t=i(4848),o=i(8453);const s={sidebar_position:2},l="Command Line Interface",d={},c=[];function a(e){const n={code:"code",h1:"h1",header:"header",li:"li",p:"p",ul:"ul",...(0,o.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.header,{children:(0,t.jsx)(n.h1,{id:"command-line-interface",children:"Command Line Interface"})}),"\n",(0,t.jsxs)(n.p,{children:["Neutrino envisions Command-Line(CLI) as the user entry with interfaces similar to ",(0,t.jsx)(n.code,{children:"strace"}),", ",(0,t.jsx)(n.code,{children:"bpftrace"}),", ",(0,t.jsx)(n.code,{children:"valgrind"}),", etc."]}),"\n",(0,t.jsxs)(n.p,{children:["Fundamental CLI of Neutrino is ",(0,t.jsx)(n.code,{children:"neutrino -p [probe] <program>"}),", like:"]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"neutrino -p <probe> python train.py"})," for PyTorch/Triton/JAX codes"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"neutrino -p <probe> ./main"})," for compiled CUDA C++ code."]}),"\n"]}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.code,{children:"<probe>"})," shall be the path to probes in ",(0,t.jsx)(n.code,{children:".toml"})," or ",(0,t.jsx)(n.code,{children:".py"})," of DSL.\nRelative path will be resovled by taking Neutrino installation directory as root."]}),"\n",(0,t.jsxs)(n.p,{children:["Moreover, ",(0,t.jsx)(n.code,{children:"neutrino"})," provide more CLI options:"]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"--tracedir TRACEDIR"}),": specifying parent folder of traces (default: ./trace)"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"--driver DRIVER"}),": path to the real cuda/hip driver shared library. The default value will be dynamically resolved in installing neutrino."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"--python PYTHON"}),": path to python executable used. The default value will be dynamically resolved in installing neutrino."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"--filter FILTER"}),": filter OUT buggy kernels by (part of) name, split by : (default: None)"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"--kernel KERNEL"}),": filter the kernel by (part of) name, split by : (default: None)"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"--memusage"}),": prevent the profiling and only measure the memory usage, helpful to prevent OOM in profiling (default: False)"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"--benchmark"}),": enable benchmark mode to evaluate overhead w.r.t. the original kernel (default: False)"]}),"\n"]})]})}function h(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(a,{...e})}):a(e)}},8453:(e,n,i)=>{i.d(n,{R:()=>s,x:()=>l});var r=i(6540);const t={},o=r.createContext(t);function s(e){const n=r.useContext(o);return r.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:s(e.components),r.createElement(o.Provider,{value:n},e.children)}}}]);